% Validation de http://hpxc/cregut.svn.enseeiht.fr/2021/1sn/pim/tps/abennagh/tp10
% Run on 2021-12-06 08:06:35.797935


################################################################################
# Modification des fichiers fournis
################################################################################


================================================================================
## Fichiers qui NE devaient PAS être modifiés
================================================================================

* Fichier alea.adb non modifié... ok
* Fichier alea.ads non modifié... ok
* Fichier exemple_alea.adb non modifié... ok
* Fichier exemple_unbounded_string.adb non modifié... ok
* Fichier sda_exceptions.ads non modifié... ok
* Fichier test_lca.adb non modifié... ERREUR

  | 11,12d10
  | <     -- Instanciation du type T_LCA tel que:
  | <     -- La clé est une chaine de caractères et la donnée est un entier


================================================================================
## Fichiers qui DEVAIENT être modifiés
================================================================================

* Fichier lca_sujet.adb modifié... ok
* Fichier lca.ads modifié... ok
* Fichier lca.adb modifié... ok
* Fichier evaluer_alea_lca.adb modifié... ok
* Fichier th_sujet.adb modifié... ok
* Fichier test_th.adb modifié... ok
* Fichier th.ads modifié... ok
* Fichier th.adb modifié... ok
* Fichier evaluer_alea_th.adb modifié... ok


################################################################################
# Nettoyer
################################################################################

* Running gnatclean... ok


################################################################################
# Exercice 1
################################################################################


================================================================================
## Modifications de lca.ads
================================================================================

* Comparaison de lca.ads et fournis/lca.ads... différents

   | -- AVEC_AFFICHER_DEBUG START DELETE                                                                <
   |         -- Afficher la Sda en révélant sa structure interne.                                       <
   |         --generic                                                                                  <
   |         --      with procedure Afficher_Cle (Cle : in T_Cle);                                      <
   |         --      with procedure Afficher_Donnee (Donnee : in T_Donnee);                             <
   |         -- procedure Afficher_Debug (Sda : in T_LCA);                                              <
   |                                                                                                    <
   |                                                                                                    <
   | -- AVEC_AFFICHER_DEBUG STOP DELETE                                                                 <
   |     type T_Cellule;                                                                                <
   |                                                                                                    <
   |     type T_LCA is access T_Cellule;                                                                <
   |                                                                                                    <
   |     type T_Cellule is record                                                                       <
   |         Cle: T_Cle;                                                                                <
   |         Donnee: T_Donnee;                                                                          <
   |         Suivant: T_LCA; -- pointeur vers la cellule suivante                                       <
   |     end record;                                                                                    <


================================================================================
## Exécution de lca_sujet.adb
================================================================================

* Compilation de lca_sujet.adb... ok
* ./lca_sujet... ok
* valgrind ./lca_sujet... ok

================================================================================
## Exécution de test_lca.adb
================================================================================

* Compilation de test_lca.adb... ok

  | test_lca.adb:259:17: warning: variable "Inutile" is assigned but never read
  | test_lca.adb:282:35: warning: formal parameter "Cle" is not referenced

* ./test_lca... ok
* valgrind ./test_lca... ok


################################################################################
# Exercice 2
################################################################################


================================================================================
## Différences entre lca.ads et th.ads
================================================================================

* Comparaison de lca.ads et th.ads... différents

   |                                                                                                    >  with LCA;
   | -- Définition de structures de données associatives sous forme d'une liste                         <
   | -- chaînée associative (LCA).                                                                      <
   |                                                                                                    >      Capacite : Integer;
   |                                                                                                    >      with function Hachage (CLe: in T_cle) return Integer;
   |                                                                                                    >
   | package LCA is                                                                                     |  package TH is
   |                                                                                                    >
   |                                                                                                    >      -- Instanciation du type T_LCA
   |                                                                                                    >      package TH_LCA is
   |                                                                                                    >              new LCA (T_Cle => T_cle, T_Donnee => T_Donnee);
   |                                                                                                    >      use TH_LCA;
   |         procedure Initialiser(Sda: out T_LCA) with                                                 |          procedure Initialiser(th: out T_TH) with  
   |                 Post => Est_Vide (Sda);                                                            |                  Post => Est_Vide (th);
   |                                                                                                    <
   |         -- Est-ce qu'une Sda est vide ?                                                            |          -- Est-ce qu'une th est vide ?
   |         function Est_Vide (Sda : T_LCA) return Boolean;                                            |          function Est_Vide (th : in T_TH) return Boolean;  
   |         function Taille (Sda : in T_LCA) return Integer with                                       |          function Taille (th : in   T_TH ) return Integer with  
   |                         and (Taille'Result = 0) = Est_Vide (Sda);                                  |                          and (Taille'Result = 0) = Est_Vide (th);
   |         -- Enregistrer une Donnée associée à une Clé dans une Sda.                                 |          -- Enregistrer une Donnée associée à une Clé dans une th.
   |         procedure Enregistrer (Sda : in out T_LCA ; Cle : in T_Cle ; Donnee : in T_Donnee) with    |          procedure Enregistrer (th : in  out  T_TH ; Cle : in T_Cle ; Donnee : in T_Donnee ) with  
   |                 Post => Cle_Presente (Sda, Cle) and (La_Donnee (Sda, Cle) = Donnee)   -- donnée in |                  Post => Cle_Presente (th, Cle) and (La_Donnee (th, Cle) = Donnee)   -- donnée insé
   |                                 and (not (Cle_Presente (Sda, Cle)'Old) or Taille (Sda) = Taille (S |                                  and (not (Cle_Presente (th, Cle)'Old) or Taille (th) = Taille (th)
   |                                 and (Cle_Presente (Sda, Cle)'Old or Taille (Sda) = Taille (Sda)'Ol |                                  and (Cle_Presente (th, Cle)'Old or Taille (th) = Taille (th)'Old +
   |         procedure Supprimer (Sda : in out T_LCA ; Cle : in T_Cle) with                             |          procedure Supprimer (th : in  out  T_TH ; Cle : in T_Cle) with  
   |                 Post =>  Taille (Sda) = Taille (Sda)'Old - 1 -- un élément de moins                |                  Post =>  Taille (th) = Taille (th)'Old - 1 -- un élément de moins
   |                         and not Cle_Presente (Sda, Cle);         -- la clé a été supprimée         |                          and not Cle_Presente (th, Cle);         -- la clé a été supprimée
   |         function Cle_Presente (Sda : in T_LCA ; Cle : in T_Cle) return Boolean;                    |          function Cle_Presente (th : in  T_TH ; Cle : in T_Cle) return Boolean;  
   |         function La_Donnee (Sda : in T_LCA ; Cle : in T_Cle) return T_Donnee;                      |          function La_Donnee (th : in  T_TH ; Cle : in T_Cle) return T_Donnee;  
   |         procedure Vider (Sda : in out T_LCA) with                                                  |          procedure Vider (th : in out T_TH ) with  
   |                 Post => Est_Vide (Sda);                                                            |                  Post => Est_Vide (th);
   |         procedure Pour_Chaque (Sda : in T_LCA);                                                    |          procedure Pour_Chaque (th : in  T_TH );  
   |         -- procedure Afficher_Debug (Sda : in T_LCA);                                              |          -- procedure Afficher_Debug (Sda : in T_LCA);
   |                                                                                                    <
   |                                                                                                    >      -- T_TH: Tableau de listes T_LCA  
   |                                                                                                    >      type T_TH  is array (1..Capacite) of T_LCA;  
   |     -- TODO : à compléter                                                                          |  end TH;
   |     type T_Cellule;                                                                                <
   |                                                                                                    <
   |     type T_LCA is access T_Cellule;                                                                <
   |                                                                                                    <
   |     type T_Cellule is record                                                                       <
   |         Cle: T_Cle;                                                                                <
   |         Donnee: T_Donnee;                                                                          <
   |         Suivant: T_LCA; -- pointeur vers la cellule suivante                                       <
   |     end record;                                                                                    <
   |                                                                                                    <
   | end LCA;                                                                                           <


================================================================================
## Différences entre test_lca.ads et test_th.ads
================================================================================

* Comparaison de test_lca.adb et test_th.adb... différents

   | with LCA;                                                                                          |  with Th;
   |     -- Instanciation du type T_LCA tel que:                                                        |      -- Implémentation de la fonction de hachage qui, ici calcule la longueur de la clé (chaine de 
   |     -- La clé est une chaine de caractères et la donnée est un entier                              |      function Hachage(Cle: in Unbounded_String) return Integer is
   |         package LCA_String_Integer is                                                              |          Longueur_Cle : Integer;
   |                 new LCA (T_Cle => Unbounded_String, T_Donnee => Integer);                          |      begin
   |     use LCA_String_Integer;                                                                        |          Longueur_Cle := Length(Cle);
   |                                                                                                    |          if  Longueur_Cle <11 then
   |                                                                                                    >              return Longueur_Cle;
   |                                                                                                    >          end if;
   |                                                                                                    >          return (Longueur_Cle mod 11) +1;
   |                                                                                                    >          -- Dans le cas où Longueur_Cle >= 11 on lui applique le modulo pour rester dans l'interval
   |                                                                                                    >          -- On ajoute +1 pour éviter le cas de 0 quand Longueur_Cle = 11 * K
   |                                                                                                    >      end Hachage;
   |                                                                                                    >
   |                                                                                                    >      -- Instanciation de la table de hachage tq:
   |                                                                                                    >      -- La clé est une chaine de caractères
   |                                                                                                    >      -- La donnée est un entier
   |                                                                                                    >      -- La capacité est à 11
   |                                                                                                    >      -- La fonction de hacahage calcule la longueur de la clé
   |                                                                                                    >          package TH_String_Integer is
   |                                                                                                    >                  new TH (T_Cle => Unbounded_String, T_Donnee => Integer, Capacite => 11 , Hachage =
   |                                                                                                    >      use TH_String_Integer;
   |                 Annuaire : T_LCA;                                                                  |                  Annuaire : T_Th;
   |                 Annuaire : T_LCA;                                                                  |                  Annuaire : T_Th;
   |                 Annuaire : T_LCA;                                                                  |                  Annuaire : T_Th;
   |                         Annuaire : T_LCA;                                                          |                          Annuaire : T_Th;
   |                         Annuaire : T_LCA;                                                          |                          Annuaire : T_Th;
   |                 Annuaire : T_LCA;                                                                  |                  Annuaire : T_Th;
   |                 Annuaire : T_LCA;                                                                  |                  Annuaire : T_Th;
   |                 Annuaire : T_LCA;                                                                  |                  Annuaire : T_Th;
   |                 Annuaire : T_LCA;                                                                  |                  Annuaire : T_Th;
   |                 Annuaire : T_LCA;                                                                  |                  Annuaire : T_Th;


================================================================================
## Exécution de th_sujet.adb
================================================================================

* Compilation de th_sujet.adb... ok
* ./th_sujet... ok
* valgrind ./th_sujet... ok

================================================================================
## Exécution de test_th.adb
================================================================================

* Compilation de test_th.adb... ok

  | test_th.adb:273:17: warning: variable "Inutile" is assigned but never read
  | test_th.adb:296:35: warning: formal parameter "Cle" is not referenced

* ./test_th... ok
* valgrind ./test_th... ok


################################################################################
# Exercice 3
################################################################################


================================================================================
## Différences entre evaluer_alea_lca.ads et evaluer_alea_th.ads
================================================================================

* Comparaison de evaluer_alea_lca.adb et evaluer_alea_th.adb... différents

   | with LCA;                                                                                          |  with TH;
   | -- Évaluer la qualité du générateur aléatoire et les LCA.                                          |  -- Évaluer la qualité du générateur aléatoire et les TH.
   |         -- Instanciation du type T_LCA                                                             |          function Hachage(Cle: in Integer) return Integer is
   |         package LCA_Integer is                                                                     |          begin
   |                 new LCA (T_Cle => Integer, T_Donnee => Integer);                                   |              if cle <1000 then
   |         use LCA_Integer;                                                                           |                  return cle;
   |                                                                                                    >              end if;
   |                                                                                                    >              return (cle mod 1000) +1;
   |                                                                                                    >          end Hachage;
   |                                                                                                    >
   |                                                                                                    >          package Th_Integer is
   |                                                                                                    >                  new TH (T_Cle => Integer, T_Donnee => Integer, Capacite => 1000 , Hachage => Hacha
   |                                                                                                    >          use TH_Integer;
   |         c: Integer; -- clé entre 1 et Borne                                                        |          c: Integer;


================================================================================
## Exécutions de evaluer_alea_*
================================================================================

* Running gnatclean... ok
* Compilation de evaluer_alea_lca.adb... ok
* Compilation de evaluer_alea_th.adb... ok

================================================================================
## Tests nominaux
================================================================================


--------------------------------------------------------------------------------
### Cas : Classique : dé à 6 faces, 100 tirages
--------------------------------------------------------------------------------

* ./evaluer_alea_lca 6 100... ok

  | Borne  : 6
  | Taille : 100
  | Min : 11
  | Max : 21

* valgrind ./evaluer_alea_lca 6 100... ok

  | Borne  : 6
  | Taille : 100
  | Min : 10
  | Max : 23

* ./evaluer_alea_th 6 100... ok

  | Borne  : 6
  | Taille : 100
  | Min : 15
  | Max : 19

* valgrind ./evaluer_alea_th 6 100... ok

  | Borne  : 6
  | Taille : 100
  | Min : 12
  | Max : 27


--------------------------------------------------------------------------------
### Cas : Beaucoup de doubles
--------------------------------------------------------------------------------

* ./evaluer_alea_lca 5 100... ok

  | Borne  : 5
  | Taille : 100
  | Min : 10
  | Max : 28

* ./evaluer_alea_th 5 100... ok

  | Borne  : 5
  | Taille : 100
  | Min : 19
  | Max : 27


--------------------------------------------------------------------------------
### Cas : Peu de doubles
--------------------------------------------------------------------------------

* ./evaluer_alea_lca 100000 10... ERREUR: Ne se termine pas !
* ./evaluer_alea_th 100000 10... ok

  | Borne  : 100000
  | Taille : 10
  | Min : 0
  | Max : 1


--------------------------------------------------------------------------------
### Cas : Limite pour Borne et Taille
--------------------------------------------------------------------------------

* ./evaluer_alea_lca 2 2... ok

  | Borne  : 2
  | Taille : 2
  | Min : 0
  | Max : 2

* ./evaluer_alea_th 2 2... ok

  | Borne  : 2
  | Taille : 2
  | Min : 0
  | Max : 0


================================================================================
## Tests de robustesse
================================================================================


--------------------------------------------------------------------------------
### Cas : Deux entiers attendus
--------------------------------------------------------------------------------

* ./evaluer_alea_lca XYZ ZYT... ok

  | Il faut entrer des entiers

* ./evaluer_alea_th XYZ ZYT... ok

  | Il faut entrer des entiers


--------------------------------------------------------------------------------
### Cas : Taille doit être un entier
--------------------------------------------------------------------------------

* ./evaluer_alea_lca 10 ZYT... ok

  | Il faut entrer des entiers

* ./evaluer_alea_th 10 ZYT... ok

  | Il faut entrer des entiers


--------------------------------------------------------------------------------
### Cas : Borne doit être un entier
--------------------------------------------------------------------------------

* ./evaluer_alea_lca XYZ 30... ok

  | Il faut entrer des entiers

* ./evaluer_alea_th XYZ 30... ok

  | Il faut entrer des entiers


--------------------------------------------------------------------------------
### Cas : Borne et Taille doivent être strictement positifs
--------------------------------------------------------------------------------

* ./evaluer_alea_lca -4 -10... ERREUR

  | Borne  : -4
  | Taille : -10


  ! raised SDA_EXCEPTIONS.CLE_ABSENTE_EXCEPTION : lca.adb:59 instantiated at evaluer_alea_lca.adb:74

* ./evaluer_alea_th -4 -10... ERREUR

  | Borne  : -4
  | Taille : -10


  ! raised SDA_EXCEPTIONS.CLE_ABSENTE_EXCEPTION : lca.adb:59 instantiated at th.ads:14 instantiated at evaluer_alea_th.adb:81


--------------------------------------------------------------------------------
### Cas : Taille doit être strictement positif
--------------------------------------------------------------------------------

* ./evaluer_alea_lca 4 -10... ok

  | Borne  : 4
  | Taille : -10
  | Min : 0
  | Max : 0

* ./evaluer_alea_th 4 -10... ok

  | Borne  : 4
  | Taille : -10
  | Min : 0
  | Max : 0


--------------------------------------------------------------------------------
### Cas : Borne doit être strictement positif
--------------------------------------------------------------------------------

* ./evaluer_alea_lca -4 10... ok

  | Borne  : -4
  | Taille : 10
  | Il faut entrer des entiers

* ./evaluer_alea_th -4 10... ok

  | Borne  : -4
  | Taille : 10
  | Il faut entrer des entiers


--------------------------------------------------------------------------------
### Cas : Il manque la taille (ou la borne)
--------------------------------------------------------------------------------

* ./evaluer_alea_lca 5... ok

  | Usage : ./evaluer_alea_lca Borne Taille
  | 
  |    Borne  : les nombres sont tirés dans l'intervalle 1..Borne
  |    Taille : la taille de l'échantillon

* ./evaluer_alea_th 5... ok

  | Usage : ./evaluer_alea_th Borne Taille
  | 
  |    Borne  : les nombres sont tirés dans l'intervalle 1..Borne
  |    Taille : la taille de l'échantillon


--------------------------------------------------------------------------------
### Cas : Borne doit être un entier ou il manque la taille
--------------------------------------------------------------------------------

* ./evaluer_alea_lca XYZ... ok

  | Usage : ./evaluer_alea_lca Borne Taille
  | 
  |    Borne  : les nombres sont tirés dans l'intervalle 1..Borne
  |    Taille : la taille de l'échantillon

* ./evaluer_alea_th XYZ... ok

  | Usage : ./evaluer_alea_th Borne Taille
  | 
  |    Borne  : les nombres sont tirés dans l'intervalle 1..Borne
  |    Taille : la taille de l'échantillon


--------------------------------------------------------------------------------
### Cas : Taille doit être strictement positif
--------------------------------------------------------------------------------

* ./evaluer_alea_lca 4 0... ok

  | Borne  : 4
  | Taille : 0
  | Min : 0
  | Max : 0

* ./evaluer_alea_th 4 0... ok

  | Borne  : 4
  | Taille : 0
  | Min : 0
  | Max : 0


--------------------------------------------------------------------------------
### Cas : Borne doit être strictement positif
--------------------------------------------------------------------------------

* ./evaluer_alea_lca 0 100... ok

  | Borne  : 0
  | Taille : 100
  | Il faut entrer des entiers

* ./evaluer_alea_th 0 100... ok

  | Borne  : 0
  | Taille : 100
  | Il faut entrer des entiers


--------------------------------------------------------------------------------
### Cas : Borne = 1 : Ne respecte pas la précondition de Calculer_Statistiques
--------------------------------------------------------------------------------

* ./evaluer_alea_lca 1 100... ok

  | Borne  : 1
  | Taille : 100
  | Min : 100
  | Max : 0

* ./evaluer_alea_th 1 100... ok

  | Borne  : 1
  | Taille : 100
  | Min : 100
  | Max : 0


--------------------------------------------------------------------------------
### Cas : Taille = 1 : Ne respecte pas la précondition de Calculer_Statistiques
--------------------------------------------------------------------------------

* ./evaluer_alea_lca 10 1... ok

  | Borne  : 10
  | Taille : 1
  | Min : 0
  | Max : 1

* ./evaluer_alea_th 10 1... ok

  | Borne  : 10
  | Taille : 1
  | Min : 0
  | Max : 1



################################################################################
# Nettoyer
################################################################################

* Running gnatclean... ok

<!-- vi: set ts=8: -->
