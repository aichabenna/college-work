% Compte-rendu minimal du mini-projet SDA : LCA et TH
% Auteur : BENNAGHMOUCH Aicha
% Groupe de TP : D


**Consigne :** Vous devez écrire vos réponse à la place des ... en laissant
une ligne vide avant et deux après votre réponse.

**Remarque :** Ce document utilise le langage Markdown. On peut en engendrer
une version PDF en faisant par exemple :

~~~
pandoc --toc -N -o LISEZ-MOI.pdf LISEZ-MOI.txt
~~~


# Exercice 1

## Question 1.4

**Indiquer les inconvénients/avantages d'une implantation par listes chaînées
d'une SDA.**

Inconvénients:
- Grande complexité: il faut parcourir l'intégralité de la liste pour insérer ou supprimer un élément... Les éléments de la listes n'étant pas triés, il est donc nécessaire de parcourir toutes la liste.
- Implémentation récursive est très coûteuse en mémoire.
- On a pas accés à la cellule précedente.

Avantages:
- Dynamique : on a pas de limitation de taille, elle peut varier en fonction du nombre d'éléments qu'on veut ajouter.
- Recherche en temps linéaire à la taille.


# Évaluation expérimentale.

## Performance comparée de LCA et TH

Indiquer ici les résultats obtenus.

## evaluer_alea_lca

|Borne           |Taille          |Min         |Max         |Temps d'exécution
|----------------|----------------|------------|------------|-------------------
|10              |10              |0           |4           |0,000s
|100             |10              |0           |1           |0,025s
|1000            |10              |0           |1           |21,757s
|10000           |10              |            |            |
|100000          |10              |            |            |
|----------------|----------------|------------|------------|-------------------
|10              |100             |7           |15          |0,000s
|100             |100             |0           |5           |0,053s
|1000            |100             |0           |2           |25,296s
|10000           |100             |            |            |
|100000          |100             |            |            |
|----------------|----------------|------------|------------|-------------------
|10              |1000            |89          |115         |0,005s
|100             |1000            |3           |18          |0,387s
|1000            |1000            |0           |5           |1m1,709s
|10000           |1000            |            |            |
|100000          |1000            |            |            |
|----------------|----------------|------------|------------|-------------------
|10              |10000           |955         |1055        |0,027S
|100             |10000           |79          |121         |3,808s
|1000            |10000           |
|10000           |10000           |
|100000          |10000           |
|----------------|----------------|------------|------------|-------------------
|10              |100000          |9928        |10110       |0,309s
|100             |100000          |922         |1092        |37,987s
|1000            |100000          |
|10000           |100000          |
|100000          |100000          |
|----------------|----------------|------------|------------|-------------------
|10              |1000000         |99662       |10379       |3,012s
|100             |1000000         |
|1000            |1000000         |
|10000           |1000000         |
|100000          |1000000         |
|----------------|----------------|------------|------------|------------------
|10              |10000000        |999042      |1001402     |29,679s
|100             |10000000        |
|1000            |10000000        |
|10000           |10000000        |
|100000          |10000000        |


Remarque : Les cases du tableau non renseignées sont dus à un temps d'exécution très long

## evaluer_alea_th

Borne           |Taille          |Min         |Max         |Temps d'exécution
----------------|----------------|------------|------------|-------------------
10              |10              |0           |4           |0m0,002s
100             |10              |0           |1           |0m0,007s
1000            |10              |0           |1           |0m0,110s
10000           |10              |0           |1           |0m2,794s
100000          |10              
----------------|----------------|------------|------------|-------------------
10              |100             |7           |15          |0m0,007s
100             |100             |0           |3           |0m0,013s
1000            |100             |0           |2           |0m0,076s
10000           |100             |0           |2           |0m2,823s
100000          |100
----------------|----------------|------------|------------|-------------------
10              |1000            |83          |114         |0m0,046s
100             |1000            |4           |19          |0m0,053s
1000            |1000            |0           |5           |0m0,154s
10000           |1000            |0           |3           |0m3,362s
100000          |1000
----------------|----------------|------------|------------|-------------------
10              |10000           |950         |1044        |0m0,465s
100             |10000           |78          |123         |0m0,529s
1000            |10000           |1           |21          |0m0,917s
10000           |10000           |0           |6           |0m8,109s
100000          |10000
----------------|----------------|------------|------------|-------------------
10              |100000          |9831        |10144       |0m4,690s
100             |100000          |937         |1089        |0m5,024s
1000            |100000          |69          |128         |0m8,755s
10000           |100000          |0           |24          |0m55,641s
100000          |100000
----------------|----------------|------------|------------|-------------------
10              |1000000         |99488       |100493      |0m46,476s
100             |1000000         |9769        |10209       |0m49,893s
1000            |1000000         |872         |1115        |1m26,270s
10000           |1000000         
100000          |1000000
----------------|----------------|------------|------------|-------------------
10              |10000000
100             |10000000
1000            |10000000
10000           |10000000
100000          |10000000


Remarque : Les cases du tableau non renseignées sont dus à un temps d'exécution très long


## Qualité du générateur aléatoire

Indiquer les conclusions quant à la qualité du générateur aléatoire.

Le temps d'exécution du programme utilisant une table de hachage est plus faible que celui s'un programme utilisant une liste chainée. En effet, pour une liste chainée, on parcourt toute la liste. Le temps d'exécution se fait donc proportionnellement à la taille de la liste. Alors que pour la table de hachage, les éléments sont classées suivant leur clé et l'accès à une case donnée d'un tableau est constant en temps.
Ainsi, la table de hachage est plus efficace en temps.   



# Principales difficultés rencontrées

Indiquer ici les principales difficultés rencontrées lors de la réalisation de
ce projet et comment elles ont été surmontées ou contournéeS.





# Informations complémentaires

Indiquer ici les informations qui pourraient aider à la compréhension du
travail réalisé.

Cette partie peut être vide.

Pour le fichier evaluer_alea_th, afin de réaliser des tests avec différentes tailles, il fallait changer la valeur de la taille dans l'instanciation de 1000 à Borne. Ceci même dans la fonction de hacahge.


# Bilan personnel

Quel bilan personnel tirez vous de ce mini-projet ?

Ce projet m'a permis d'apprendre à mieux manipuler les modules génériques et les instancier.

