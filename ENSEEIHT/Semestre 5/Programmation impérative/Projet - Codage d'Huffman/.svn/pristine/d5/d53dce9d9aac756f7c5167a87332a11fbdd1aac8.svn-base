generic
	type T_data is private;
	type T_id is private;

package TREE is

	type T_Tree is limited private;

	-- Initialiser un Tree.
	procedure Initialize(Tree: out T_Tree) with
		Post => Est_Vide (Tree);


	-- Est-ce qu'une Sda est vide ?
	function Is_Empty (Tree : T_Tree) return Boolean;

    	procedure Create_Leaf (Tree : out T_Tree ; Id : T_id; Data : T_Data);

	procedure Create_Node (Tree : out T_Tree ; left : in  T_Tree; right : in  T_Tree);

    	function key (Tree : in T_Tree ) return T_id;

	-- Obtenir la donnée associée à une Cle dans la Sda.
	-- Exception : Cle_Absente_Exception si Clé n'est pas utilisée dans l'Sda
	function Huffman_Code (Tree : in T_Tree ; Data : in T_data) return Unbounded_String;


	procedure Vider (Tree : in out T_Tree) with
		Post => Est_Vide (Tree);


	-- Appliquer un traitement (Traiter) pour chaque couple d'une Sda.
	--generic
		--with procedure Traiter (Cle : in T_Cle; Donnee: in T_Donnee);
	--procedure Pour_Chaque (Sda : in T_LCA);


-- AVEC_AFFICHER_DEBUG STOP DELETE
private

    type T_Node;

    type T_Tree is access T_Node;

    type T_Node is record
        Left : T_Tree;
        Right : T_Tree;
        Data : T_data;
        id : T_id;
    end record;

end TREE;
