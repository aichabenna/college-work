module SimplePDL2PetriNet;
create OUT: petrinet from  IN: simplepdl;

-- Obtenir le processus qui contient ce process element.
-- Remarque: Ce helper ne serait pas utile si une r�f�rence opposite
-- avait �t� plac�e entre Process et ProcessElement
helper context simplepdl!ProcessElement
def: getProcess(): simplepdl!Process =
	simplepdl!Process.allInstances()
		->select(p | p.processElements->includes(self))
		->asSequence()->first();


-- Traduire un Process en un PetriNet de m�me nom
rule Process2PetriNet {
	from p: simplepdl!Process
	to pn: petrinet!Net (name <- p.name)
}


rule Resource2PetriNet {
	from rs: simplepdl!Resource
	using {
		net : petrinet!Net = petrinet!Net.allInstances()
							->asSequence()->first();
	}
	to
		p_rs: petrinet!Place(
				name <- rs.name,
				token <- rs.quantity)
	do{
		net.netElement<- net.netElement->append(p_rs);	
	}
}

-- Traduire une WorkDefinition en un motif sur le r�seau de Petri
rule WorkDefinition2PetriNet {
	from wd: simplepdl!WorkDefinition
	using {
		net : petrinet!Net = petrinet!Net.allInstances()
							->asSequence()->first();
	}
	to
		-- PLACES d'une WorkDefinition
		p_ready: petrinet!Place(
				name <- wd.name + '_ready',
				token <- 1),
		p_started: petrinet!Place(
				name <- wd.name + '_started',
				token <- 0),
		p_running: petrinet!Place(
				name <- wd.name + '_running',
				token <- 0),
		p_finished: petrinet!Place(
				name <- wd.name + '_finished',
				token <- 0),
				
		-- TRANSITIONS d'une WorkDefinition
		t_start: petrinet!Transition(
				name <- wd.name + '_start'),
		t_finish: petrinet!Transition(
				name <- wd.name + '_finish'),
				
		-- ARC d'une WorkDefinition
		a1: petrinet!Arc(
				source <- p_ready,
				target <- t_start),
		a2: petrinet!Arc(
				source <- t_start,
				target <- p_running),
		a3: petrinet!Arc(
				source <- p_running,
				target <- t_finish),
		a4: petrinet!Arc(
				source <- t_finish,
				target <- p_finished),
		a5: petrinet!Arc(
				source <- t_start,
				target <- p_started)
	do{
		net.netElement<- net.netElement->append(p_ready);
		net.netElement<- net.netElement->append(p_started);
		net.netElement<- net.netElement->append(p_running);
		net.netElement<- net.netElement->append(p_finished);
		net.netElement<- net.netElement->append(t_start);
		net.netElement<- net.netElement->append(t_finish);
		net.netElement<- net.netElement->append(a1);
		net.netElement<- net.netElement->append(a2);
		net.netElement<- net.netElement->append(a3);
		net.netElement<- net.netElement->append(a4);
		net.netElement<- net.netElement->append(a5);
	}
}

rule Allocate2PetriNet {
	from al: simplepdl!Allocate
	using {
		net : petrinet!Net = petrinet!Net.allInstances()
							->asSequence()->first();
	}
	to
		a_al: petrinet!Arc(
				weigth <- al.occurence,
				source <- petrinet!Place.allInstances()
							->select(p | p.name = al.resource.name)
							->asSequence()->first(),
				target <- petrinet!Transition.allInstances()
							->select(p | p.name = al.allocator.name+'_start')
							->asSequence()->first())
	do{
		net.netElement<- net.netElement->append(a_al);
	}
}

rule WorkSequenceSS2PetriNet {
	from ws: simplepdl!WorkSequence(ws.linkType = #startToStart)
	using {
		net : petrinet!Net = petrinet!Net.allInstances()
							->asSequence()->first();
	}
	to
		a_ws: petrinet!Arc(
			type <- #readArc,
			source <- petrinet!Place.allInstances()
							->select(p | p.name = ws.predecessor.name+'_started')
							->asSequence()->first(),
			target <- petrinet!Transition.allInstances()
							->select(p | p.name = ws.successor.name+'_start')
							->asSequence()->first())
	do{
		net.netElement<- net.netElement->append(a_ws);
	}
}

rule WorkSequenceFS2PetriNet {
	from ws: simplepdl!WorkSequence(ws.linkType = #finishToStart)
	using {
		net : petrinet!Net = petrinet!Net.allInstances()
							->asSequence()->first();
	}
	to
		a_ws: petrinet!Arc(
			type <- #readArc,
			source <- petrinet!Place.allInstances()
							->select(p | p.name = ws.predecessor.name+'_finished')
							->asSequence()->first(),
			target <- petrinet!Transition.allInstances()
							->select(p | p.name = ws.successor.name+'_start')
							->asSequence()->first())	
	do{
		net.netElement<- net.netElement->append(a_ws);
	}
}

rule WorkSequenceSF2PetriNet {
	from ws: simplepdl!WorkSequence(ws.linkType = #startToFinish)
	using {
		net : petrinet!Net = petrinet!Net.allInstances()
							->asSequence()->first();
	}
	to
		a_ws: petrinet!Arc(
			type <- #readArc,
			source <- petrinet!Place.allInstances()
							->select(p | p.name = ws.predecessor.name+'_started')
							->asSequence()->first(),
			target <- petrinet!Transition.allInstances()
							->select(p | p.name = ws.successor.name+'_finish')
							->asSequence()->first())		
	do{
		net.netElement<- net.netElement->append(a_ws);
	}
}

rule WorkSequenceFF2PetriNet {
	from ws: simplepdl!WorkSequence(ws.linkType = #finishToFinish)
	using {
		net : petrinet!Net = petrinet!Net.allInstances()
							->asSequence()->first();
	}
	to
		a_ws: petrinet!Arc(
			type <- #readArc,
			source <- petrinet!Place.allInstances()
							->select(p | p.name = ws.predecessor.name+'_finished')
							->asSequence()->first(),
			target <- petrinet!Transition.allInstances()
							->select(p | p.name = ws.successor.name+'_finish')
							->asSequence()->first())	
	do{
		net.netElement<- net.netElement->append(a_ws);
	}						
}

